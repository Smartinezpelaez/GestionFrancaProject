// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace DataModel
{
	public partial class GestionFrancaDb : DataConnection
	{
		public GestionFrancaDb()
		{
			InitDataContext();
		}

		public GestionFrancaDb(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public GestionFrancaDb(DataOptions<GestionFrancaDb> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<Elemento>        Elementos        => this.GetTable<Elemento>();
		public ITable<Sucursal>        Sucursals        => this.GetTable<Sucursal>();
		public ITable<Tecnico>         Tecnicos         => this.GetTable<Tecnico>();
		public ITable<TecnicoElemento> TecnicoElementos => this.GetTable<TecnicoElemento>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static Elemento? Find(this ITable<Elemento> table, int elementoId)
		{
			return table.FirstOrDefault(e => e.ElementoId == elementoId);
		}

		public static Task<Elemento?> FindAsync(this ITable<Elemento> table, int elementoId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ElementoId == elementoId, cancellationToken);
		}

		public static Sucursal? Find(this ITable<Sucursal> table, int sucursalId)
		{
			return table.FirstOrDefault(e => e.SucursalId == sucursalId);
		}

		public static Task<Sucursal?> FindAsync(this ITable<Sucursal> table, int sucursalId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.SucursalId == sucursalId, cancellationToken);
		}

		public static Tecnico? Find(this ITable<Tecnico> table, int tecnicoId)
		{
			return table.FirstOrDefault(e => e.TecnicoId == tecnicoId);
		}

		public static Task<Tecnico?> FindAsync(this ITable<Tecnico> table, int tecnicoId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.TecnicoId == tecnicoId, cancellationToken);
		}

		public static TecnicoElemento? Find(this ITable<TecnicoElemento> table, int tecnicoElementoId)
		{
			return table.FirstOrDefault(e => e.TecnicoElementoId == tecnicoElementoId);
		}

		public static Task<TecnicoElemento?> FindAsync(this ITable<TecnicoElemento> table, int tecnicoElementoId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.TecnicoElementoId == tecnicoElementoId, cancellationToken);
		}
		#endregion
	}
}
